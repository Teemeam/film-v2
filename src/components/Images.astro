---
import encodeImage from '../lib/encodeImage';
import getTags from '../lib/getTags';
import formatDescription from '../lib/formatDescription';
import timestampToDate from '../lib/timestampToDate';
import dateToLocaleString from '../lib/dateToLocaleString';
import groupDataByMonth from '../lib/groupDataByMonth';

/* Components */
import { Images as ImagesComponent } from './Images';

const { data } = Astro.props;

const formattedData: FormattedData[] = [];

await Promise.all(
  data.map(async (dataItem: CompleteData) => {
    const urlBase = `https://live.staticflickr.com/${dataItem.photo.server}/${dataItem.photo.id}_${dataItem.photo.originalsecret}`;
    const blurhash = await encodeImage(`${urlBase}_t.jpg`);

    const date = dataItem.photo.dates.taken.includes('-01-01 00:00:00') // Taken Jan 1 at 00:00
      ? timestampToDate(dataItem.photo.dateuploaded, false)
      : timestampToDate(dataItem.photo.dates.taken, true);

    formattedData.push({
      id: dataItem.photo.id,
      urlBase: urlBase,
      blurhash: blurhash.encoded,
      tags: getTags(dataItem.photo.tags),
      description: formatDescription(dataItem.photo.description._content),
      aspectRatio: dataItem.aspectRatio,
      date: date,
      dateLabel: dateToLocaleString(date),
      flickrUrl: dataItem.photo.urls.url[0]!._content,
    });
  })
);

/**
 * Sort formatted data by date
 */
formattedData.sort((a, b) => b.date.getTime() - a.date.getTime());

/**
 * Group data by date label
 */
const groupedData: FormattedData[][] = groupDataByMonth(formattedData);
---

<ImagesComponent client:load data={groupedData} />
