---
import { createFlickr, FetchTransport } from 'flickr-sdk';
import { getOriginalWidth, getOriginalHeight } from '../lib/getOriginalDimensions';
// import generateSafelist from '../lib/generateSafelist';

/* Layouts */
import Layout from '../layouts/Layout.astro';

/* Components */
import Header from '../components/Header';
import Images from '../components/Images.astro';
import Footer from '../components/Footer';
import Test from '../components/Test';

/**
 * OAuth configuration
 */
const oauthConfig = {
  consumerKey: import.meta.env.CONSUMER_KEY,
  consumerSecret: import.meta.env.CONSUMER_SECRET,
  oauthToken: import.meta.env.OAUTH_TOKEN,
  oauthTokenSecret: import.meta.env.OAUTH_TOKEN_SECRET,
};

const transport = new FetchTransport();

const flickr = createFlickr(oauthConfig, transport);

/**
 * Fetch data
 */
const response = await flickr.flickr('flickr.photosets.getPhotos', {
  photoset_id: import.meta.env.PHOTOSET_ID,
  user_id: import.meta.env.USER_ID,
  privacy_filter: '5',
});

const photos: Photo[] = response.photoset.photo;

const completeData: CompleteData[] = [];

await Promise.all(
  photos.map(async (photo: Photo) => {
    /**
     * Fetch info
     */
    const infoResponse = await flickr.flickr('flickr.photos.getInfo', {
      photo_id: photo.id,
    });
    const infoData: InfoData = await infoResponse;

    /**
     * Fetch sizes
     */
    const sizeResponse = await flickr.flickr('flickr.photos.getSizes', {
      photo_id: photo.id,
    });
    const sizeData: SizeData = await sizeResponse;

    const sizes: Size[] = sizeData.sizes.size;

    /**
     * Complete data
     */
    const width = getOriginalWidth(sizes);
    const height = getOriginalHeight(sizes);

    const data: CompleteData = {
      ...infoData,
      aspectRatio: typeof width === 'number' && typeof height === 'number' ? width / height : 1,
    };

    completeData.push(data);
  })
);

/**
 * Generate safelist from aspect ratios
generateSafelist(completeData); */
---

<Layout title='Teemu Kakko Film Photo Showcase'>
  <main>
    <Header />
    <Images data={completeData} />
    <Footer />
    <Test client:load data={completeData} />
  </main>
</Layout>
